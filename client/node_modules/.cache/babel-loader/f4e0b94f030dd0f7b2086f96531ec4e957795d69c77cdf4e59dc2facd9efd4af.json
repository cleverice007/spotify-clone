{"ast":null,"code":"var _jsxFileName = \"/Users/yanyuming/Documents/GitHub/spotify-clone/client/src/components/Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllAlbums, getSongsInAlbum } from '../services/musicService';\nimport AlbumGallery from './AlbumGallery';\nimport PlaybackBar from './PlaybackBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [albums, setAlbums] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  useEffect(() => {\n    const fetchAlbums = async () => {\n      const fetchedAlbums = await getAllAlbums();\n      setAlbums(fetchedAlbums);\n    };\n    fetchAlbums();\n  }, []);\n  const handleAlbumClick = async albumId => {\n    const songs = await getSongsInAlbum(albumId);\n    if (songs.length > 0) {\n      setCurrentSong(songs[0]);\n      setIsPlaying(true);\n    }\n  };\n  const handleSongChange = song => {\n    setCurrentSong(song);\n    setIsPlaying(true);\n  };\n  const togglePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AlbumGallery, {\n      albums: albums,\n      onAlbumClick: handleAlbumClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlaybackBar, {\n      currentSong: currentSong,\n      isPlaying: isPlaying,\n      onPlayPause: togglePlayPause\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"sjyeoa53i/9hAMwwOPXT23osAgg=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","getAllAlbums","getSongsInAlbum","AlbumGallery","PlaybackBar","jsxDEV","_jsxDEV","Home","_s","albums","setAlbums","currentSong","setCurrentSong","isPlaying","setIsPlaying","fetchAlbums","fetchedAlbums","handleAlbumClick","albumId","songs","length","handleSongChange","song","togglePlayPause","children","onAlbumClick","fileName","_jsxFileName","lineNumber","columnNumber","onPlayPause","_c","$RefreshReg$"],"sources":["/Users/yanyuming/Documents/GitHub/spotify-clone/client/src/components/Home.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Album, Song } from '../interfaces/MusicModels';\nimport { getAllAlbums, getSongsInAlbum } from '../services/musicService';\nimport AlbumGallery from './AlbumGallery';\nimport PlaybackBar from './PlaybackBar';\n\nconst Home: React.FC = () => {\n  const [albums, setAlbums] = useState<Album[]>([]);\n  const [currentSong, setCurrentSong] = useState<Song | null>(null);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n\n  useEffect(() => {\n    const fetchAlbums = async () => {\n      const fetchedAlbums = await getAllAlbums();\n      setAlbums(fetchedAlbums);\n    };\n\n    fetchAlbums();\n  }, []);\n\n  const handleAlbumClick = async (albumId: string) => {\n    const songs = await getSongsInAlbum(albumId);\n    if (songs.length > 0) { \n      setCurrentSong(songs[0]);\n      setIsPlaying(true);\n    }\n  };\n\n  const handleSongChange = (song: Song) => {\n    setCurrentSong(song);\n    setIsPlaying(true);\n  };\n\n  const togglePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  return (\n    <div>\n      <AlbumGallery albums={albums} onAlbumClick={handleAlbumClick} />\n      <PlaybackBar \n        currentSong={currentSong} \n        isPlaying={isPlaying} \n        onPlayPause={togglePlayPause} \n      />\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,YAAY,EAAEC,eAAe,QAAQ,0BAA0B;AACxE,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,IAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAU,EAAE,CAAC;EACjD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAc,IAAI,CAAC;EACjE,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAU,KAAK,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACd,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAMC,aAAa,GAAG,MAAMf,YAAY,CAAC,CAAC;MAC1CS,SAAS,CAACM,aAAa,CAAC;IAC1B,CAAC;IAEDD,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,gBAAgB,GAAG,MAAOC,OAAe,IAAK;IAClD,MAAMC,KAAK,GAAG,MAAMjB,eAAe,CAACgB,OAAO,CAAC;IAC5C,IAAIC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACpBR,cAAc,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;MACxBL,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;EAED,MAAMO,gBAAgB,GAAIC,IAAU,IAAK;IACvCV,cAAc,CAACU,IAAI,CAAC;IACpBR,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5BT,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,oBACEP,OAAA;IAAAkB,QAAA,gBACElB,OAAA,CAACH,YAAY;MAACM,MAAM,EAAEA,MAAO;MAACgB,YAAY,EAAER;IAAiB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChEvB,OAAA,CAACF,WAAW;MACVO,WAAW,EAAEA,WAAY;MACzBE,SAAS,EAAEA,SAAU;MACrBiB,WAAW,EAAEP;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAArB,EAAA,CAzCKD,IAAc;AAAAwB,EAAA,GAAdxB,IAAc;AA2CpB,eAAeA,IAAI;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}