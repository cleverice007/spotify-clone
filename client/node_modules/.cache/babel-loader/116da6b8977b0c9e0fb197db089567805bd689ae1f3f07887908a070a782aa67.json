{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8080/api';// 獲得專輯裡的歌曲\nexport const getSongsInAlbum=async albumId=>{try{const response=await axios.get(\"\".concat(API_URL,\"/albums/\").concat(albumId,\"/songs\"));return response.data;}catch(error){console.error(\"There was an error fetching the songs for album \".concat(albumId,\":\"),error);return[];}};// 獲得所有的專輯\nexport const getAllAlbums=async()=>{try{const response=await axios.get(\"\".concat(API_URL,\"/albums\"));return response.data;}catch(error){console.error(\"There was an error fetching the albums:\",error);return[];}};export const uploadSong=async songData=>{// 1. 獲取S3的預簽名URL\nlet presignedUrls;try{presignedUrls=await getPresignedUrl(songData.albumTitle,songData.title);}catch(error){console.error(\"Error getting presigned URLs:\",error);throw error;}// 2. 上傳到S3\nawait axios.put(presignedUrls.songPresignedUrl,songData.filePath);await axios.put(presignedUrls.coverPresignedUrl,songData.albumCoverUrl);// 3. 獲得S3的URL或路徑 \nconst songS3Path=\"https://spotify-clone-mason.s3.amazonaws.com/\".concat(songData.albumTitle,\"/songs/\").concat(songData.title,\".mp3\");const coverS3Path=\"https://spotify-clone-mason.s3.amazonaws.com/\".concat(songData.albumTitle,\"/cover.jpg\");// 4. 發送到後端\ntry{const response=await axios.post(\"\".concat(API_URL,\"/upload\"),{albumTitle:songData.albumTitle,songTitle:songData.title,artist:songData.artist,filePath:songS3Path,albumCoverUrl:coverS3Path});return response.data;}catch(error){console.error(\"Error uploading song details to backend:\",error);throw error;}};export const getPresignedUrl=async(albumTitle,title)=>{const endpoint='<YOUR_LAMBDA_ENDPOINT>';// 替換成您的Lambda endpoint\nconst data={albumTitle:albumTitle,title:title};try{const response=await axios.post(endpoint,data);return response.data;// 預先簽名的URL應該在response的data中\n}catch(error){console.error(\"Error fetching presigned URL: \",error);throw error;}};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","getSongsInAlbum","albumId","response","get","concat","data","error","console","getAllAlbums","uploadSong","songData","presignedUrls","getPresignedUrl","albumTitle","title","put","songPresignedUrl","filePath","coverPresignedUrl","albumCoverUrl","songS3Path","coverS3Path","post","songTitle","artist","endpoint"],"sources":["/Users/yanyuming/Documents/GitHub/spotify-clone/client/src/services/musicService.tsx"],"sourcesContent":["\nimport axios from 'axios';\nimport { Song, Album } from '../interfaces/MusicModels';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// 獲得專輯裡的歌曲\nexport const getSongsInAlbum = async (albumId: string): Promise<Song[]> => {\n  try {\n    const response = await axios.get(`${API_URL}/albums/${albumId}/songs`);\n    return response.data;\n  } catch (error) {\n    console.error(`There was an error fetching the songs for album ${albumId}:`, error);\n    return [];\n  }\n};\n\n\n// 獲得所有的專輯\nexport const getAllAlbums = async (): Promise<Album[]> => {\n  try {\n    const response = await axios.get(`${API_URL}/albums`);\n    return response.data;\n  } catch (error) {\n    console.error(\"There was an error fetching the albums:\", error);\n    return [];\n  }\n};\n\nexport const uploadSong = async (songData: {\n  title: string,\n  artist: string,\n  filePath: File,\n  albumTitle: string,\n  albumCoverUrl: File\n}) => {\n\n  // 1. 獲取S3的預簽名URL\n  let presignedUrls;\n  try {\n    presignedUrls = await getPresignedUrl(songData.albumTitle, songData.title);\n  } catch (error) {\n    console.error(\"Error getting presigned URLs:\", error);\n    throw error;\n  }\n\n  // 2. 上傳到S3\n  await axios.put(presignedUrls.songPresignedUrl, songData.filePath);\n  await axios.put(presignedUrls.coverPresignedUrl, songData.albumCoverUrl);\n\n  // 3. 獲得S3的URL或路徑 \n  const songS3Path = `https://spotify-clone-mason.s3.amazonaws.com/${songData.albumTitle}/songs/${songData.title}.mp3`;\n  const coverS3Path = `https://spotify-clone-mason.s3.amazonaws.com/${songData.albumTitle}/cover.jpg`;\n\n  // 4. 發送到後端\n  try {\n    const response = await axios.post(`${API_URL}/upload`, {\n      albumTitle: songData.albumTitle,\n      songTitle: songData.title,\n      artist: songData.artist,\n      filePath: songS3Path,\n      albumCoverUrl: coverS3Path\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error uploading song details to backend:\", error);\n    throw error;\n  }\n};\n\n\nexport const getPresignedUrl = async (albumTitle: string, title: string) => {\n  const endpoint = '<YOUR_LAMBDA_ENDPOINT>'; // 替換成您的Lambda endpoint\n  const data = {\n      albumTitle: albumTitle,\n      title: title,\n  };\n\n  try {\n      const response = await axios.post(endpoint, data);\n      return response.data; // 預先簽名的URL應該在response的data中\n  } catch (error) {\n      console.error(\"Error fetching presigned URL: \", error);\n      throw error;\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}