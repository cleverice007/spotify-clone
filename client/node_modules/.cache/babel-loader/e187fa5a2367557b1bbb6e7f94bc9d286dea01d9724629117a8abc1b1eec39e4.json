{"ast":null,"code":"import _regeneratorRuntime from\"/Users/yanyuming/Documents/GitHub/spotify-clone/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/yanyuming/Documents/GitHub/spotify-clone/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import axios from'axios';var API_URL=process.env.REACT_APP_API_URL||'http://localhost:8080/api';// 獲得專輯裡的歌曲\nexport var getSongsInAlbum=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(albumId){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(\"\".concat(API_URL,\"/albums/\").concat(albumId,\"/songs\"));case 3:response=_context.sent;return _context.abrupt(\"return\",response.data);case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.error(\"There was an error fetching the songs for album \".concat(albumId,\":\"),_context.t0);return _context.abrupt(\"return\",[]);case 11:case\"end\":return _context.stop();}},_callee,null,[[0,7]]);}));return function getSongsInAlbum(_x){return _ref.apply(this,arguments);};}();// 獲得所有的專輯\nexport var getAllAlbums=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return axios.get(\"\".concat(API_URL,\"/albums\"));case 3:response=_context2.sent;return _context2.abrupt(\"return\",response.data);case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);console.error(\"There was an error fetching the albums:\",_context2.t0);return _context2.abrupt(\"return\",[]);case 11:case\"end\":return _context2.stop();}},_callee2,null,[[0,7]]);}));return function getAllAlbums(){return _ref2.apply(this,arguments);};}();export var uploadSong=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(songData){var presignedUrls,songS3Path,coverS3Path,response;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return getPresignedUrl(songData.albumTitle,songData.title);case 3:presignedUrls=_context3.sent;_context3.next=10;break;case 6:_context3.prev=6;_context3.t0=_context3[\"catch\"](0);console.error(\"Error getting presigned URLs:\",_context3.t0);throw _context3.t0;case 10:_context3.next=12;return axios.put(presignedUrls.songPresignedUrl,songData.filePath);case 12:_context3.next=14;return axios.put(presignedUrls.coverPresignedUrl,songData.albumCoverUrl);case 14:// 3. 獲得S3的URL或路徑 \nsongS3Path=\"https://spotify-clone-mason.s3.amazonaws.com/\".concat(songData.albumTitle,\"/songs/\").concat(songData.title,\".mp3\");coverS3Path=\"https://spotify-clone-mason.s3.amazonaws.com/\".concat(songData.albumTitle,\"/cover.jpg\");// 4. 發送到後端\n_context3.prev=16;_context3.next=19;return axios.post(\"\".concat(API_URL,\"/upload\"),{albumTitle:songData.albumTitle,songTitle:songData.title,artist:songData.artist,filePath:songS3Path,albumCoverUrl:coverS3Path});case 19:response=_context3.sent;return _context3.abrupt(\"return\",response.data);case 23:_context3.prev=23;_context3.t1=_context3[\"catch\"](16);console.error(\"Error uploading song details to backend:\",_context3.t1);throw _context3.t1;case 27:case\"end\":return _context3.stop();}},_callee3,null,[[0,6],[16,23]]);}));return function uploadSong(_x2){return _ref3.apply(this,arguments);};}();export var getPresignedUrl=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(albumTitle,title){var endpoint,data,response;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:endpoint='<YOUR_LAMBDA_ENDPOINT>';// 替換成您的Lambda endpoint\ndata={albumTitle:albumTitle,title:title};_context4.prev=2;_context4.next=5;return axios.post(endpoint,data);case 5:response=_context4.sent;return _context4.abrupt(\"return\",response.data);case 9:_context4.prev=9;_context4.t0=_context4[\"catch\"](2);console.error(\"Error fetching presigned URL: \",_context4.t0);throw _context4.t0;case 13:case\"end\":return _context4.stop();}},_callee4,null,[[2,9]]);}));return function getPresignedUrl(_x3,_x4){return _ref4.apply(this,arguments);};}();","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","getSongsInAlbum","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","albumId","response","wrap","_callee$","_context","prev","next","get","concat","sent","abrupt","data","t0","console","error","stop","_x","apply","arguments","getAllAlbums","_ref2","_callee2","_callee2$","_context2","uploadSong","_ref3","_callee3","songData","presignedUrls","songS3Path","coverS3Path","_callee3$","_context3","getPresignedUrl","albumTitle","title","put","songPresignedUrl","filePath","coverPresignedUrl","albumCoverUrl","post","songTitle","artist","t1","_x2","_ref4","_callee4","endpoint","_callee4$","_context4","_x3","_x4"],"sources":["/Users/yanyuming/Documents/GitHub/spotify-clone/client/src/services/musicService.tsx"],"sourcesContent":["\nimport axios from 'axios';\nimport { Song, Album } from '../interfaces/MusicModels';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// 獲得專輯裡的歌曲\nexport const getSongsInAlbum = async (albumId: string): Promise<Song[]> => {\n  try {\n    const response = await axios.get(`${API_URL}/albums/${albumId}/songs`);\n    return response.data;\n  } catch (error) {\n    console.error(`There was an error fetching the songs for album ${albumId}:`, error);\n    return [];\n  }\n};\n\n\n// 獲得所有的專輯\nexport const getAllAlbums = async (): Promise<Album[]> => {\n  try {\n    const response = await axios.get(`${API_URL}/albums`);\n    return response.data;\n  } catch (error) {\n    console.error(\"There was an error fetching the albums:\", error);\n    return [];\n  }\n};\n\nexport const uploadSong = async (songData: {\n  title: string,\n  artist: string,\n  filePath: File,\n  albumTitle: string,\n  albumCoverUrl: File\n}) => {\n\n  // 1. 獲取S3的預簽名URL\n  let presignedUrls;\n  try {\n    presignedUrls = await getPresignedUrl(songData.albumTitle, songData.title);\n  } catch (error) {\n    console.error(\"Error getting presigned URLs:\", error);\n    throw error;\n  }\n\n  // 2. 上傳到S3\n  await axios.put(presignedUrls.songPresignedUrl, songData.filePath);\n  await axios.put(presignedUrls.coverPresignedUrl, songData.albumCoverUrl);\n\n  // 3. 獲得S3的URL或路徑 \n  const songS3Path = `https://spotify-clone-mason.s3.amazonaws.com/${songData.albumTitle}/songs/${songData.title}.mp3`;\n  const coverS3Path = `https://spotify-clone-mason.s3.amazonaws.com/${songData.albumTitle}/cover.jpg`;\n\n  // 4. 發送到後端\n  try {\n    const response = await axios.post(`${API_URL}/upload`, {\n      albumTitle: songData.albumTitle,\n      songTitle: songData.title,\n      artist: songData.artist,\n      filePath: songS3Path,\n      albumCoverUrl: coverS3Path\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error uploading song details to backend:\", error);\n    throw error;\n  }\n};\n\n\nexport const getPresignedUrl = async (albumTitle: string, title: string) => {\n  const endpoint = '<YOUR_LAMBDA_ENDPOINT>'; // 替換成您的Lambda endpoint\n  const data = {\n      albumTitle: albumTitle,\n      title: title,\n  };\n\n  try {\n      const response = await axios.post(endpoint, data);\n      return response.data; // 預先簽名的URL應該在response的data中\n  } catch (error) {\n      console.error(\"Error fetching presigned URL: \", error);\n      throw error;\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}