{"ast":null,"code":"import React,{useState,useEffect}from'react';import{getAllAlbums,getSongsInAlbum,getPresignedUrl}from'../services/musicService';import AlbumGallery from'./AlbumGallery';import PlaybackBar from'./PlaybackBar';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Home=()=>{const[albums,setAlbums]=useState([]);const[currentSong,setCurrentSong]=useState(null);const[isPlaying,setIsPlaying]=useState(false);const[presignedUrl,setPresignedUrl]=useState(\"\");useEffect(()=>{const fetchAlbums=async()=>{const fetchedAlbums=await getAllAlbums();setAlbums(fetchedAlbums);};fetchAlbums();},[]);useEffect(()=>{const fetchPresignedUrl=async()=>{try{const url=await getPresignedUrl(\"AlbumSample\",\"SongSample\");setPresignedUrl(url);}catch(error){console.error(\"Error fetching presigned URL on /home: \",error);}};fetchPresignedUrl();},[]);const handleAlbumClick=async albumId=>{const songs=await getSongsInAlbum(albumId);if(songs.length>0){setCurrentSong(songs[0]);setIsPlaying(true);}};const handleSongChange=song=>{setCurrentSong(song);setIsPlaying(true);};const handleUploadClick=async()=>{console.log(\"Uploading song to album: AlbumSample, song: SongSample\");};const togglePlayPause=()=>{setIsPlaying(!isPlaying);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(AlbumGallery,{albums:albums,onAlbumClick:handleAlbumClick,onUploadClick:handleUploadClick}),/*#__PURE__*/_jsx(PlaybackBar,{currentSong:currentSong,isPlaying:isPlaying,onPlayPause:togglePlayPause})]});};export default Home;","map":{"version":3,"names":["React","useState","useEffect","getAllAlbums","getSongsInAlbum","getPresignedUrl","AlbumGallery","PlaybackBar","jsx","_jsx","jsxs","_jsxs","Home","albums","setAlbums","currentSong","setCurrentSong","isPlaying","setIsPlaying","presignedUrl","setPresignedUrl","fetchAlbums","fetchedAlbums","fetchPresignedUrl","url","error","console","handleAlbumClick","albumId","songs","length","handleSongChange","song","handleUploadClick","log","togglePlayPause","children","onAlbumClick","onUploadClick","onPlayPause"],"sources":["/Users/yanyuming/Documents/GitHub/spotify-clone/client/src/components/Home.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Album, Song } from '../interfaces/MusicModels';\nimport { getAllAlbums, getSongsInAlbum, getPresignedUrl } from '../services/musicService';\nimport AlbumGallery from './AlbumGallery';\nimport PlaybackBar from './PlaybackBar';\n\nconst Home: React.FC = () => {\n  const [albums, setAlbums] = useState<Album[]>([]);\n  const [currentSong, setCurrentSong] = useState<Song | null>(null);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [presignedUrl, setPresignedUrl] = useState<string>(\"\");\n\n  useEffect(() => {\n    const fetchAlbums = async () => {\n      const fetchedAlbums = await getAllAlbums();\n      setAlbums(fetchedAlbums);\n    };\n\n    fetchAlbums();\n  }, []);\n\n  useEffect(() => {\n    const fetchPresignedUrl = async () => {\n        try {\n            const url = await getPresignedUrl(\"AlbumSample\", \"SongSample\");\n            setPresignedUrl(url);\n        } catch (error) {\n            console.error(\"Error fetching presigned URL on /home: \", error);\n        }\n    };\n\n    fetchPresignedUrl();\n  }, []);\n\n  const handleAlbumClick = async (albumId: string) => {\n    const songs = await getSongsInAlbum(albumId);\n    if (songs.length > 0) { \n      setCurrentSong(songs[0]);\n      setIsPlaying(true);\n    }\n  };\n\n  const handleSongChange = (song: Song) => {\n    setCurrentSong(song);\n    setIsPlaying(true);\n  };\n\n  const handleUploadClick = async () => {\n   console.log(\"Uploading song to album: AlbumSample, song: SongSample\");\n  }\n\n  const togglePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  return (\n    <div>\n      <AlbumGallery albums={albums} onAlbumClick={handleAlbumClick} onUploadClick={handleUploadClick} />\n      <PlaybackBar \n        currentSong={currentSong} \n        isPlaying={isPlaying} \n        onPlayPause={togglePlayPause} \n      />\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAElD,OAASC,YAAY,CAAEC,eAAe,CAAEC,eAAe,KAAQ,0BAA0B,CACzF,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,WAAW,KAAM,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAExC,KAAM,CAAAC,IAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGb,QAAQ,CAAU,EAAE,CAAC,CACjD,KAAM,CAACc,WAAW,CAAEC,cAAc,CAAC,CAAGf,QAAQ,CAAc,IAAI,CAAC,CACjE,KAAM,CAACgB,SAAS,CAAEC,YAAY,CAAC,CAAGjB,QAAQ,CAAU,KAAK,CAAC,CAC1D,KAAM,CAACkB,YAAY,CAAEC,eAAe,CAAC,CAAGnB,QAAQ,CAAS,EAAE,CAAC,CAE5DC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmB,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,KAAM,CAAAC,aAAa,CAAG,KAAM,CAAAnB,YAAY,CAAC,CAAC,CAC1CW,SAAS,CAACQ,aAAa,CAAC,CAC1B,CAAC,CAEDD,WAAW,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAENnB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAqB,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACA,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAnB,eAAe,CAAC,aAAa,CAAE,YAAY,CAAC,CAC9De,eAAe,CAACI,GAAG,CAAC,CACxB,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,yCAAyC,CAAEA,KAAK,CAAC,CACnE,CACJ,CAAC,CAEDF,iBAAiB,CAAC,CAAC,CACrB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAI,gBAAgB,CAAG,KAAO,CAAAC,OAAe,EAAK,CAClD,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAzB,eAAe,CAACwB,OAAO,CAAC,CAC5C,GAAIC,KAAK,CAACC,MAAM,CAAG,CAAC,CAAE,CACpBd,cAAc,CAACa,KAAK,CAAC,CAAC,CAAC,CAAC,CACxBX,YAAY,CAAC,IAAI,CAAC,CACpB,CACF,CAAC,CAED,KAAM,CAAAa,gBAAgB,CAAIC,IAAU,EAAK,CACvChB,cAAc,CAACgB,IAAI,CAAC,CACpBd,YAAY,CAAC,IAAI,CAAC,CACpB,CAAC,CAED,KAAM,CAAAe,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CACrCP,OAAO,CAACQ,GAAG,CAAC,wDAAwD,CAAC,CACtE,CAAC,CAED,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5BjB,YAAY,CAAC,CAACD,SAAS,CAAC,CAC1B,CAAC,CAED,mBACEN,KAAA,QAAAyB,QAAA,eACE3B,IAAA,CAACH,YAAY,EAACO,MAAM,CAAEA,MAAO,CAACwB,YAAY,CAAEV,gBAAiB,CAACW,aAAa,CAAEL,iBAAkB,CAAE,CAAC,cAClGxB,IAAA,CAACF,WAAW,EACVQ,WAAW,CAAEA,WAAY,CACzBE,SAAS,CAAEA,SAAU,CACrBsB,WAAW,CAAEJ,eAAgB,CAC9B,CAAC,EACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAvB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}